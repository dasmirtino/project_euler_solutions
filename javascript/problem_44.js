const { get_answer } = require("./utils");

// Pentagonal numbers are generated by the formula,
// Pn=n(3n−1)/2. The first ten pentagonal numbers are:

// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

// It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
// However, their difference, 70 − 22 = 48, is not pentagonal.

// Find the pair of pentagonal numbers, Pj and Pk, for which
// their sum and difference are pentagonal and D = |Pk − Pj|
// is minimised; what is the value of D?

/**
 *
 * @param {number} n nth term of pentagonal sequence
 * @returns nth pentagonal number
 */
function P_n(n) {
  return (n * (3 * n - 1)) / 2;
}

/**
 *
 * @param {number} Pn possible pentagonal number
 * @returns true if Pn belongs to the pentagonal sequence
 */
function is_pentagonal(Pn) {
  let n = (Math.sqrt(24 * Pn + 1) + 1) / 6;
  return n % 1 === 0;
}

/**
 *
 * @returns Finds the minimised difference of a pair of pentagonal numbers,
 * Pj and Pk, for which their sum and difference are pentagonal.
 */
function get_min_difference() {
  let min_diff = 0;

  for (let gap = 3; gap < 2000; gap++)
    for (let n = 1; n < 2000; n++) {
      let Pj = P_n(n);
      let Pk = P_n(n + gap);
      let sum = Pk + Pj;
      let diff = Pk - Pj;

      if (is_pentagonal(diff) && is_pentagonal(sum)) {
        min_diff = diff;
      }
    }
  return min_diff;
}

get_answer(get_min_difference());
