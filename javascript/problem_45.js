const { test, get_answer } = require("./utils");

// Triangle, pentagonal, and hexagonal numbers are
// generated by the following formula:

// Triangle	 	  Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
// Pentagonal	 	Pn=n(3nâˆ’1)/2	1, 5, 12, 22, 35, ...
// Hexagonal	 	Hn=n(2nâˆ’1)	 	1, 6, 15, 28, 45, ...

// It can be verified that T285 = P165 = H143 = 40755.

// Find the next triangle number that is also pentagonal and
// hexagonal.

/**
 *
 * @param {number[]} prev_hexagonals array that contains previous hexagonals
 * numbers starting from 0
 * @returns the next hexagonal number in the hexagonal sequence.
 */
function next_hexagonal(prev_hexagonals) {
  let n = prev_hexagonals.length;
  prev_hexagonals.push(n * (2 * n - 1));
  return prev_hexagonals[n];
}

/**
 *
 * @param {number[]} prev_pentagonal array that contains previous pentagonals
 * numbers starting from 0.
 * @returns the next pentagonal number in the pentagonal sequence.
 */
function next_pentagonal(prev_pentagonal) {
  let n = prev_pentagonal.length;
  prev_pentagonal.push((n * (3 * n - 1)) / 2);
  return prev_pentagonal[n];
}

/**
 *
 * @returns The triangle number that is also pentagonal
 * and hexagonal greater than 40755 (first triangle number
 * that is also pentagonal and hexagonal).
 */
function get_desire_number() {
  let hexagonals = [0, 1, 6, 15, 28, 45];
  let pentagonals = [0, 1, 5, 12, 22, 35];
  let counter = 0;
  let desire_number = 0;

  // NO test triangle numbers because hexagonals number are triangle numbers.
  while (counter !== 2) {
    let Pn = next_pentagonal(pentagonals);
    let Hn = next_hexagonal(hexagonals);

    let gap = Hn - Pn;
    while (gap > 0) {
      Pn = next_pentagonal(pentagonals);
      gap = Hn - Pn;
    }
    if (Pn === Hn) {
      counter++;
      desire_number = Pn;
    }
  }
  return desire_number;
}

get_answer(get_desire_number());
