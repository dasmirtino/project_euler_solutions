const { test, get_answer } = require("./utils.js");

// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
//      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

/**
 *
 * @param {number} n
 * @returns return the nth term of the sequence of triangle number
 */
function get_sum_of_first(n) {
  return (n * (n + 1)) / 2;
}

/**
 *
 * @param {number} n
 * @returns the number of divisors of n
 */
function get_num_divisors(n) {
  let i = 1,
    limit = Math.sqrt(n),
    num_divs = 0;
  while (i <= limit) {
    if (n % i === 0) {
      if (n / i == 0) {
        num_divs++;
      } else {
        num_divs += 2;
      }
    }
    i++;
  }
  return num_divs;
}

/**
 *
 * @param {number} max
 * @returns {number} the first triangle number to have over max divisors
 */
function find_first_num(max) {
  let i = 1,
    sum = 0;
  while (true) {
    sum = get_sum_of_first(i);
    let n = get_num_divisors(sum);
    if (n > max) {
      break;
    }
    i++;
  }

  return sum;
}

test(find_first_num(5));

get_answer(find_first_num(500));
